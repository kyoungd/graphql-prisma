  # import UserOrderByInput, CommentOrderByInput, PostOrderByInput from './generated/prisma.graphql'
  
  type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    me: User,
    posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!,
    post(id: ID!): Post,
    comments(query: String, first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!],
  }

  type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createPost(data: CreatePostInput!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    deletePost(id: ID!): Post!
    createComment(data: CreateCommentInput!): Comment!
    updateComment(id: ID! data: UpdateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    loginUser(data: LoginUserInput!): AuthPayload!
    changePassword(password: String!): String!
  }

  type Subscription {
    post(userId: ID!):  PostSubscriptionPayload!
    comment(postId: ID!): CommentSubscriptionPayload!
    mypost: PostSubscriptionPayload!
  }

  input LoginUserInput {
    email: String!
    password: String!
  }
   
  type AuthPayload {
    token: String!
    user: User!
  }

  input CreateUserInput{
    name: String,
    email: String,
    password: String,
  }

  input UpdateUserInput {
    name: String,
    email: String,
  }

  input CreatePostInput {
    title: String!, 
    body: String!, 
    published: Boolean!,
  }

  input UpdatePostInput {
    title: String, 
    body: String, 
    published: Boolean, 
  }

  input CreateCommentInput {
    text: String!, 
    post: ID!
  }

  input UpdateCommentInput {
    text: String!
    post: ID
  }

  type User {
    id: ID!,
    name: String!,
    email: String,
    password: String!
    posts: [Post!],
    updatedAt: String!,
    createdAt: String!,
  }

  type Post {
    id: ID!,
    title: String!,
    body: String!,
    published: Boolean!,
    author: User!,
    comments: [Comment!]!
    updatedAt: String!,
    createdAt: String!,
  }

  type Comment {
    id: ID!,
    text: String,
    author: User!
    post: Post!
    updatedAt: String!,
    createdAt: String!,
  }

  enum MutationType {
    CREATED
    UPDATED
    DELETED
  }

  type PostSubscriptionPayload {
    mutation: MutationType,
    node: Post!
  }

  type CommentSubscriptionPayload {
    mutation: MutationType,
    node: Comment
  }
